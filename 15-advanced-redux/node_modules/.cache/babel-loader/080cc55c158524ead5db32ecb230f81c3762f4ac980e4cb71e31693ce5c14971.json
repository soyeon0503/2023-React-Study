{"ast":null,"code":"var _jsxFileName = \"/Users/soyeon/Documents/study/react/15-advanced-redux/src/App.js\",\n  _s = $RefreshSig$();\nimport Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Fragment, useEffect } from 'react';\nimport { uiAction } from './store/ui-slice';\nimport Notification from './components/UI/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet isInitial = true;\nfunction App() {\n  _s();\n  // useSelector 훅을 가져온 컴포넌트 함수는 리덕스에 접근할 수 있다\n  // useSelector를 사용하려면 리덕스 상태를 자동으로 받는 함수를 전달해야한다\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  // useEffect의 종속성 값이 바뀔 때마다 http수신을 한다\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const sendCartData = async () => {\n      dispatch(uiAction.showNotification({\n        status: 'pending',\n        title: 'Sending',\n        message: 'Sending cart data...'\n      }));\n      const response = await fetch('https://react-cart-43575-default-rtdb.firebaseio.com/cart.json', {\n        method: 'PUT',\n        body: JSON.stringify(cart) //장바구니 데이터를 json파일로 변환하여 요청의 일부로 보낸다\n      });\n\n      if (!response.ok) {\n        new Error('Sent cart data failed!');\n      }\n      dispatch(uiAction.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Sent cart data successfully!'\n      }));\n\n      // const responseData = await response.json();\n      // 이미 useSelector에 대한 종속성으로 추가했다 장바구니가 변경되면 fetch요청이 다시 실행된다 \n    };\n\n    if (isInitial) {\n      isInitial = false;\n      return;\n    }\n    sendCartData().catch(error => {\n      dispatch(uiAction.showNotification({\n        status: 'error',\n        title: 'Error!',\n        message: 'Sent cart data failed!'\n      }));\n    });\n  }, [cart, dispatch]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [notification && /*#__PURE__*/_jsxDEV(Notification, {\n      status: notification.status,\n      title: notification.title,\n      message: notification.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Layout, {\n      children: [showCart && /*#__PURE__*/_jsxDEV(Cart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Products, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6JowzntmuCESpo3mvbM39TbyWIU=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n_c = App;\nexport default App;\n\n// 리듀서는 인풋을 받아 아웃풋을 생성해내는 순수하고 부수효과가 없는 동기식 함수이다\n// 리듀서에 전달되는 훅도 순수함수여야한다\n// 인풋을 받았을 때  동일한 아웃풋을 생성하며 이를 차단하는 비ㅇㅣ 코도 없고 도중에 발생하는\n// 부수효과도 없다면 리듀서 함수의 일부가 되어선 안된다\n\n// 그렇지만 이는 리덕스로 작업할 때 보내야하는 HTTP 요청과 같이 부수 효과가 수반되는\n// 일부 작업을 전달할 때 부수효과가 있는 코드를 어디에 넣어야하는지 의문이 둘 수도 있다\n\n// 우리는 이런 비동기 코드를 useEffect를 사용하여 컴포넌트에 직접 비동기 코드의 부수효과를 넣는 걸로 해결할 수 있는데\n// 이 방법은 부수효과가 완료된 후에만 작업을 전달하기 때문에\n// 리덕스는 그 부수 효과에 대해 아무것도 알지 못하거나\n// 우리가 우리 자신의 작업 크리에이터 함수를 작성하는 새로운 것이 되어\n// 자동으로 생성된 리덕스 툴킷을 제공하는 것을 사용하지 않을 수도 있다\n// 다른 방법으로는 직접 리덕스 작업 크리에이터의 일부로 부수 효과를 실행하고 비동기 작업을\n// 실행할 수 있는 솔루션을 가지고 있다\n\n// http 요청을 하는 리덕스를 어플리케이션에 통합하려면 어떻게 해야할까?\n// 우선 리듀서는 순수함수여야하고 부수효과가 없고 동기식이어야 한다\n// 따라서 http요청과 같은 비동기식 코드는 리듀서 함수에 들어가선 안된다.\n// 부수효과는 절대로 리덕스 안에서 수행해선 안된다.\n\n// 리덕스의 상태를 변경해서는 안되며, 리덕스 외부에서 수행될 수 없다.\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Cart","Layout","Products","useSelector","useDispatch","Fragment","useEffect","uiAction","Notification","jsxDEV","_jsxDEV","isInitial","App","_s","showCart","state","ui","cartIsVisible","cart","notification","dispatch","sendCartData","showNotification","status","title","message","response","fetch","method","body","JSON","stringify","ok","Error","catch","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/soyeon/Documents/study/react/15-advanced-redux/src/App.js"],"sourcesContent":["import Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { useSelector , useDispatch} from 'react-redux';\nimport { Fragment, useEffect } from 'react';\nimport { uiAction } from './store/ui-slice';\nimport Notification from'./components/UI/Notification';\n\nlet isInitial = true;\n\nfunction App() {\n  // useSelector 훅을 가져온 컴포넌트 함수는 리덕스에 접근할 수 있다\n  // useSelector를 사용하려면 리덕스 상태를 자동으로 받는 함수를 전달해야한다\n  const showCart = useSelector(state => state.ui.cartIsVisible);\n  // useEffect의 종속성 값이 바뀔 때마다 http수신을 한다\n  const cart = useSelector(state => state.cart);\n  const notification = useSelector(state => state.ui.notification);\n\n  const dispatch = useDispatch();\n  \n  useEffect(()=>{\n    const sendCartData = async () => {\n      dispatch(uiAction.showNotification({\n        status: 'pending',\n        title : 'Sending',\n        message: 'Sending cart data...',\n      }));\n      const response = await fetch('https://react-cart-43575-default-rtdb.firebaseio.com/cart.json',{\n          method: 'PUT',\n          body: JSON.stringify(cart), //장바구니 데이터를 json파일로 변환하여 요청의 일부로 보낸다\n      });\n      if(!response.ok){\n        new Error('Sent cart data failed!');\n      }\n      dispatch(uiAction.showNotification({\n        status: 'success',\n        title : 'Success!',\n        message: 'Sent cart data successfully!',\n      }));\n\n      // const responseData = await response.json();\n        // 이미 useSelector에 대한 종속성으로 추가했다 장바구니가 변경되면 fetch요청이 다시 실행된다 \n    }\n    if(isInitial){\n      isInitial = false;\n      return;\n    }\n    sendCartData().catch((error)=>{\n      dispatch(uiAction.showNotification({\n        status: 'error',\n        title : 'Error!',\n        message: 'Sent cart data failed!',\n      }));\n    });\n  },[cart, dispatch]);\n\n  return (\n    <Fragment>\n      {notification && \n        <Notification \n          status={notification.status} \n          title={notification.title}\n          message={notification.message}\n        />\n      }\n      <Layout>\n        {showCart && <Cart /> }\n        <Products />\n      </Layout>\n    </Fragment>\n  );\n}\n\nexport default App;\n\n// 리듀서는 인풋을 받아 아웃풋을 생성해내는 순수하고 부수효과가 없는 동기식 함수이다\n// 리듀서에 전달되는 훅도 순수함수여야한다\n// 인풋을 받았을 때  동일한 아웃풋을 생성하며 이를 차단하는 비ㅇㅣ 코도 없고 도중에 발생하는\n// 부수효과도 없다면 리듀서 함수의 일부가 되어선 안된다\n\n// 그렇지만 이는 리덕스로 작업할 때 보내야하는 HTTP 요청과 같이 부수 효과가 수반되는\n// 일부 작업을 전달할 때 부수효과가 있는 코드를 어디에 넣어야하는지 의문이 둘 수도 있다\n\n// 우리는 이런 비동기 코드를 useEffect를 사용하여 컴포넌트에 직접 비동기 코드의 부수효과를 넣는 걸로 해결할 수 있는데\n// 이 방법은 부수효과가 완료된 후에만 작업을 전달하기 때문에\n// 리덕스는 그 부수 효과에 대해 아무것도 알지 못하거나\n// 우리가 우리 자신의 작업 크리에이터 함수를 작성하는 새로운 것이 되어\n// 자동으로 생성된 리덕스 툴킷을 제공하는 것을 사용하지 않을 수도 있다\n// 다른 방법으로는 직접 리덕스 작업 크리에이터의 일부로 부수 효과를 실행하고 비동기 작업을\n// 실행할 수 있는 솔루션을 가지고 있다\n\n\n// http 요청을 하는 리덕스를 어플리케이션에 통합하려면 어떻게 해야할까?\n// 우선 리듀서는 순수함수여야하고 부수효과가 없고 동기식이어야 한다\n// 따라서 http요청과 같은 비동기식 코드는 리듀서 함수에 들어가선 안된다.\n// 부수효과는 절대로 리덕스 안에서 수행해선 안된다.\n\n\n// 리덕스의 상태를 변경해서는 안되며, 리덕스 외부에서 수행될 수 없다.\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}