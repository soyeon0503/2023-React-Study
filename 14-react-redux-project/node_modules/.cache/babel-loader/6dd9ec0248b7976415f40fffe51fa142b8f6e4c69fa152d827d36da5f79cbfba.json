{"ast":null,"code":"var _jsxFileName = \"/Users/soyeon/Documents/study/react/14-react-redux-project/src/components/Counter.js\",\n  _s = $RefreshSig$();\nimport classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { counterActions } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  // useSelector를 이용해서 저장소가 관리하는 데이터에 엑세스할 수 있다\n  // 이 함수를 호출하고, 이 useSelector에 함수를 넣어줘야한다\n  // 넣은 함수는 리덕스가 관리하는 상태를 받고, 우리가 추출하련느 상태 부분을 리턴해야한다\n  const counter = useSelector(state => state.counter);\n  // useDispatch 훅을 사용하여 dispatch function을 반환한다\n  // redux store에 대한 action을 보낸다\n  const dispatch = useDispatch();\n  const show = useSelector(state => state.showCounter);\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.increment);\n  };\n  const incrementHandler = () => {\n    dispatch(counterActions.decrement);\n  };\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement);\n  };\n  const increaseHandler = () => {\n    dispatch({\n      type: 'increase',\n      amount: 5\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"bmG+sMgiykIBTWx37luxqLSPX1w=\", false, function () {\n  return [useSelector, useDispatch, useSelector];\n});\n_c = Counter;\nexport default Counter;\n\n// 리덕스가 기존의 state를 대체하는데 사용하는 객체는 새 snapshot를 반홚야한다\n// 이 값은 기존의 state와 병합되지 않고 기존 state를 덮어쓰는 것이다\n// 리덕스를 사용할 때는 기존의 state를 변형해서는 안된다 \n// 새로운 state 객체를 반환하여 항상 재정의 한다\n\n// 이런 실수로 인해 오류를 내지 않기 위해 우리는 리덕스 툴킷이라는 패키지를 사용한다\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["classes","useSelector","useDispatch","counterActions","jsxDEV","_jsxDEV","Counter","_s","counter","state","dispatch","show","showCounter","toggleCounterHandler","increment","incrementHandler","decrement","decrementHandler","increaseHandler","type","amount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["/Users/soyeon/Documents/study/react/14-react-redux-project/src/components/Counter.js"],"sourcesContent":["import classes from './Counter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { counterActions } from '../store';\n\nconst Counter = () => {\n  // useSelector를 이용해서 저장소가 관리하는 데이터에 엑세스할 수 있다\n  // 이 함수를 호출하고, 이 useSelector에 함수를 넣어줘야한다\n  // 넣은 함수는 리덕스가 관리하는 상태를 받고, 우리가 추출하련느 상태 부분을 리턴해야한다\n  const counter = useSelector((state) => state.counter);\n  // useDispatch 훅을 사용하여 dispatch function을 반환한다\n  // redux store에 대한 action을 보낸다\n  const dispatch = useDispatch();\n  const show = useSelector(state => state.showCounter);\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.increment);\n  };\n\n  const incrementHandler = () => {\n    dispatch(counterActions.decrement);\n  };\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement)\n  }\n  const increaseHandler = () => {\n    dispatch({type:'increase', amount : 5});\n  }\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={decrementHandler}>Decrement</button>\n        <button onClick={increaseHandler}>Increase</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n// 리덕스가 기존의 state를 대체하는데 사용하는 객체는 새 snapshot를 반홚야한다\n// 이 값은 기존의 state와 병합되지 않고 기존 state를 덮어쓰는 것이다\n// 리덕스를 사용할 때는 기존의 state를 변형해서는 안된다 \n// 새로운 state 객체를 반환하여 항상 재정의 한다\n\n// 이런 실수로 인해 오류를 내지 않기 위해 우리는 리덕스 툴킷이라는 패키지를 사용한다"],"mappings":";;AAAA,OAAOA,OAAO,MAAM,sBAAsB;AAC1C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA;EACA;EACA,MAAMC,OAAO,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACD,OAAO,CAAC;EACrD;EACA;EACA,MAAME,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAMS,IAAI,GAAGV,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACG,WAAW,CAAC;EAEpD,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjCH,QAAQ,CAACP,cAAc,CAACW,SAAS,CAAC;EACpC,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BL,QAAQ,CAACP,cAAc,CAACa,SAAS,CAAC;EACpC,CAAC;EACD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BP,QAAQ,CAACP,cAAc,CAACa,SAAS,CAAC;EACpC,CAAC;EACD,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5BR,QAAQ,CAAC;MAACS,IAAI,EAAC,UAAU;MAAEC,MAAM,EAAG;IAAC,CAAC,CAAC;EACzC,CAAC;EACD,oBACEf,OAAA;IAAMgB,SAAS,EAAErB,OAAO,CAACQ,OAAQ;IAAAc,QAAA,gBAC/BjB,OAAA;MAAAiB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBf,IAAI,iBAAIN,OAAA;MAAKgB,SAAS,EAAErB,OAAO,CAAC2B,KAAM;MAAAL,QAAA,EAAEd;IAAO;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvDrB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAQuB,OAAO,EAAEb,gBAAiB;QAAAO,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDrB,OAAA;QAAQuB,OAAO,EAAEX,gBAAiB;QAAAK,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrDrB,OAAA;QAAQuB,OAAO,EAAEV,eAAgB;QAAAI,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACNrB,OAAA;MAAQuB,OAAO,EAAEf,oBAAqB;MAAAS,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;AAACnB,EAAA,CAnCID,OAAO;EAAA,QAIKL,WAAW,EAGVC,WAAW,EACfD,WAAW;AAAA;AAAA4B,EAAA,GARpBvB,OAAO;AAqCb,eAAeA,OAAO;;AAEtB;AACA;AACA;AACA;;AAEA;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}