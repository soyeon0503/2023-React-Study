// 리액트의 상태를 세가지로 구분할 수 있다.
// 로컬상태, 크로스 컴포넌트 상태, 앱 와이드 상태가 있다.
// 로컬 상태 : 데이터가 변경되어 UI에 영향을 미치는 상태
// 크로스 컴포넌트 상태 : state가 하나의 컴포넌트가 아닌 다수의 컴포넌트에 영향을 미치는 경우
// 앱 와이드 상태 : state가 앱 전체에 영향을 미치는 경우
// 리액트 컨텍스트와 리덕스 모두 크로스 컴포넌트 상태나 앱 와이드 상태를 관리하도록 도와준다.
// 그럼 컨텍스트가 있는데 왜 굳이 리덕스가 필요할까?
// 리액트 컨텍스트를 쓰면 또한 prop 체인이나 prop 드릴링을 하지 않을 수 있고, 대신에 우리는
// Context와 ContextProvider 컴포넌트를 중심으로 상태를 관리할 수 있다.
// 이런 컨텍스트에는 잠재적인 문제점이 있다. 
// 컨텍스트를 사용하여 오히러 상태 관리가 복잡해질 수 있다는 문제점이 발생한다.
// 소형 또는 중형 애플리케이션은 문제가 되지 않지만 대형 프로젝트인 경우 컨텍스트를 사용하면 복잡한 코드를 작성해야될 수도 있다.
// 보통 앱 와이드 상태는 리덕스를 사용하고, 앱에서 다루는 다중 컴포넌트 상태에서는 컨텍스트를 사용할 수 있다.
// 둘 중에 어느것이 좋아 선택하여 사용하는 개념은 아니다. 

// 리덕스는 하나의 저장소에서 모든 상태를 관리하며 우리는 저장소의 데이터를 컴포넌트 안에서 사용한다

// 리액트는 한 저장소에서 데이터들을 관리하고, 우는 그 데이터들을 컴포넌트 안에서 사ㅇ할 수 있다.
// 예를 들어 사용자의 인증 상태가 변경되는 등 데이터가 변경되면 컴포넌트에서 그걸 인지해서 대응하고 ui를 업데이트한다
// 컴포넌트를 위해 우리 중앙 저장소를 구독하고 데이터가 변경될 때마다 저장소가 컴포넌트에 알려준다
// 컴포넌트는 필요한 데이터를 받게되고 우리는 그 데이터를 사용할 수 있다
// 이 데이터를 변경하는 것은 컴포넌트가 아니다. 
// 여기서 이제 리듀서라는 개념이 등장하는데, 우리는 리듀서 함수로 데이터를 변경한다. 
// 리듀서는 훅이 아니다 일반 함수이며 