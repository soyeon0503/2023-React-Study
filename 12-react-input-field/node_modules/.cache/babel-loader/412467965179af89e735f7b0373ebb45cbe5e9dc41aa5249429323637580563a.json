{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useReducer } from \"react\";\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\n// create Reducer Function\nconst inputStateReducer = (state, action) => {\n  return inputStateReducer;\n};\nconst useInput = validateValue => {\n  _s();\n  useReducer(inputStateReducer, {});\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n  const inputBlurHandler = () => {\n    setIsTouched(true);\n  };\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"2x+j/JNDqrJ0mXkFsWdf+OaGo7M=\");\nexport default useInput;\n\n// useReducer\n// state를 관리하고 업데이트 하는 hook인 useState를 대체 할 수 있는 hook","map":{"version":3,"names":["useState","useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","_s","enteredValue","setEnteredValue","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"sources":["/Users/soyeon/Documents/study/react/12-react-input-field/src/hooks/use-input.js"],"sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst initialInputState = {\n    value : '',\n    isTouched : false\n};\n\n// create Reducer Function\nconst inputStateReducer = (state, action) => {\n    return inputStateReducer;\n};\n\nconst useInput = (validateValue) => {\n    useReducer(inputStateReducer, {})\n\n    const [enteredValue, setEnteredValue] = useState(\"\");\n    const [isTouched, setIsTouched] = useState(false);\n\n    const valueIsValid = validateValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n    \n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    };   \n\n    const inputBlurHandler= () => {\n        setIsTouched(true);\n    }; \n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    };\n\n    return {\n        value : enteredValue, \n        isValid : valueIsValid,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler,\n        reset\n    };\n};\n\nexport default useInput;\n\n// useReducer\n// state를 관리하고 업데이트 하는 hook인 useState를 대체 할 수 있는 hook"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAE5C,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAG,EAAE;EACVC,SAAS,EAAG;AAChB,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,OAAOF,iBAAiB;AAC5B,CAAC;AAED,MAAMG,QAAQ,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAChCT,UAAU,CAACI,iBAAiB,EAAE,CAAC,CAAC,CAAC;EAEjC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACI,SAAS,EAAES,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMc,YAAY,GAAGL,aAAa,CAACE,YAAY,CAAC;EAChD,MAAMI,QAAQ,GAAG,CAACD,YAAY,IAAIV,SAAS;EAE3C,MAAMY,kBAAkB,GAAIC,KAAK,IAAK;IAClCL,eAAe,CAACK,KAAK,CAACC,MAAM,CAACf,KAAK,CAAC;EACvC,CAAC;EAED,MAAMgB,gBAAgB,GAAEA,CAAA,KAAM;IAC1BN,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMO,KAAK,GAAGA,CAAA,KAAM;IAChBR,eAAe,CAAC,EAAE,CAAC;IACnBC,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,OAAO;IACHV,KAAK,EAAGQ,YAAY;IACpBU,OAAO,EAAGP,YAAY;IACtBC,QAAQ;IACRC,kBAAkB;IAClBG,gBAAgB;IAChBC;EACJ,CAAC;AACL,CAAC;AAACV,EAAA,CA9BIF,QAAQ;AAgCd,eAAeA,QAAQ;;AAEvB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}