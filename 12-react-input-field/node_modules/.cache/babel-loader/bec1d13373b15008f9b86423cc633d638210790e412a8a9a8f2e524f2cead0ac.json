{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useReducer } from \"react\";\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\n// create Reducer Function\nconst inputStateReducer = (state, action) => {\n  return inputStateReducer;\n};\nconst useInput = validateValue => {\n  _s();\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n  const inputBlurHandler = () => {\n    setIsTouched(true);\n  };\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\nexport default useInput;\n\n// useReducer\n// state를 관리하고 업데이트 하는 hook인 useState를 대체 할 수 있는 hook","map":{"version":3,"names":["useState","useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","_s","inputState","dispatch","valueIsValid","enteredValue","hasError","valueChangeHandler","event","setEnteredValue","target","inputBlurHandler","setIsTouched","reset","isValid"],"sources":["/Users/soyeon/Documents/study/react/12-react-input-field/src/hooks/use-input.js"],"sourcesContent":["import { useState, useReducer } from \"react\";\n\nconst initialInputState = {\n    value : '',\n    isTouched : false\n};\n\n// create Reducer Function\nconst inputStateReducer = (state, action) => {\n    return inputStateReducer;\n};\n\nconst useInput = (validateValue) => {\n    const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n\n    const valueIsValid = validateValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n    \n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    };   \n\n    const inputBlurHandler= () => {\n        setIsTouched(true);\n    }; \n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    };\n\n    return {\n        value : enteredValue, \n        isValid : valueIsValid,\n        hasError,\n        valueChangeHandler,\n        inputBlurHandler,\n        reset\n    };\n};\n\nexport default useInput;\n\n// useReducer\n// state를 관리하고 업데이트 하는 hook인 useState를 대체 할 수 있는 hook"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAE5C,MAAMC,iBAAiB,GAAG;EACtBC,KAAK,EAAG,EAAE;EACVC,SAAS,EAAG;AAChB,CAAC;;AAED;AACA,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACzC,OAAOF,iBAAiB;AAC5B,CAAC;AAED,MAAMG,QAAQ,GAAIC,aAAa,IAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,UAAU,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACI,iBAAiB,EAAEH,iBAAiB,CAAC;EAE/E,MAAMW,YAAY,GAAGJ,aAAa,CAACK,YAAY,CAAC;EAChD,MAAMC,QAAQ,GAAG,CAACF,YAAY,IAAIT,SAAS;EAE3C,MAAMY,kBAAkB,GAAIC,KAAK,IAAK;IAClCC,eAAe,CAACD,KAAK,CAACE,MAAM,CAAChB,KAAK,CAAC;EACvC,CAAC;EAED,MAAMiB,gBAAgB,GAAEA,CAAA,KAAM;IAC1BC,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMC,KAAK,GAAGA,CAAA,KAAM;IAChBJ,eAAe,CAAC,EAAE,CAAC;IACnBG,YAAY,CAAC,KAAK,CAAC;EACvB,CAAC;EAED,OAAO;IACHlB,KAAK,EAAGW,YAAY;IACpBS,OAAO,EAAGV,YAAY;IACtBE,QAAQ;IACRC,kBAAkB;IAClBI,gBAAgB;IAChBE;EACJ,CAAC;AACL,CAAC;AAACZ,EAAA,CA3BIF,QAAQ;AA6Bd,eAAeA,QAAQ;;AAEvB;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}