{"ast":null,"code":"var _jsxFileName = \"/Users/soyeon/Documents/study/react/12-react-input-field/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  // const nameInputRef = useRef(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  // 전체 양식의 입력이 유효한지 검증\n  // const [formIsValid, setFormIsValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState('');\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // 모든 디펜던시들을 합친 후에 이 값이 모두 유효한지 확인하고 유효하다면 전체 폼이 유효하다고 설정\n  // useEffect(()=>{\n  let formIsValid = false;\n  if (enteredNameIsValid) {\n    formIsValid = true;\n  }\n  // }, [enteredNameIsValid]);\n\n  // prev\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     console.log(\"Name is Valid\");\n  //   }\n  // }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    // state는 비동기로 처리되므로 즉각적으로 반영되지 않는다\n    // 최신의 상태를 반영하고 싶다면 event 객체를 쓰자\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  };\n\n  const forSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    // const enteredValue =  nameInputRef.current.value;\n\n    if (!enteredNameIsValid) {\n      // setEnteredNameIsValid(false);\n      return;\n    }\n\n    // setEnteredNameIsValid(true);\n\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n  };\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: forSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        // ref={nameInputRef}\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"jloW08/v6AyqvWBd3z8REvu7aKw=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","forSubmissionHandler","preventDefault","nameInputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onChange","onBlur","emailInputClasses","disabled","_c","$RefreshReg$"],"sources":["/Users/soyeon/Documents/study/react/12-react-input-field/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  // const nameInputRef = useRef(\"\");\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n \n  // 전체 양식의 입력이 유효한지 검증\n  // const [formIsValid, setFormIsValid] = useState(false);\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState('');\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  \n  // 모든 디펜던시들을 합친 후에 이 값이 모두 유효한지 확인하고 유효하다면 전체 폼이 유효하다고 설정\n  // useEffect(()=>{\n    let formIsValid = false;\n    if(enteredNameIsValid ){\n      formIsValid = true;\n    }\n  // }, [enteredNameIsValid]);\n\n  // prev\n  // useEffect(() => {\n  //   if (enteredNameIsValid) {\n  //     console.log(\"Name is Valid\");\n  //   }\n  // }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    // state는 비동기로 처리되므로 즉각적으로 반영되지 않는다\n    // 최신의 상태를 반영하고 싶다면 event 객체를 쓰자\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n    \n    // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n  };\n\n  const forSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    // const enteredValue =  nameInputRef.current.value;\n\n    if (!enteredNameIsValid) {\n      // setEnteredNameIsValid(false);\n      return;\n    }\n\n    // setEnteredNameIsValid(true);\n    \n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={forSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          // ref={nameInputRef}\n          type='text'\n          id='name'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your Email</label>\n        <input\n          type='email'\n          id='email'\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className='error-text'>Please enter a valid email</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}