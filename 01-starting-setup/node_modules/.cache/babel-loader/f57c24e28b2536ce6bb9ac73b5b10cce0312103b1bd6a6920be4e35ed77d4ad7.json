{"ast":null,"code":"var _jsxFileName = \"/Users/jeonsoyeon/Desktop/react/01-starting-setup/src/components/NewExpense/NewExpense.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './NewExpense.css';\nimport ExpenseForm from \"./ExpenseForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewExpense = props => {\n  _s();\n  const saveExpenseDataHandler = enteredExpenseData => {\n    // 매개변수로 받아온 Data 객체를 저장하고\n    // 새로운 키인 id룰 추가한다\n    const expenseData = {\n      ...enteredExpenseData,\n      id: (Math.random() * 10 + 1).toString()\n    };\n    props.onAddExpeseHandler(expenseData);\n    console.log(expenseData);\n  };\n  const [isFlag, setIsFlag] = useState(true);\n  const isEditState = () => {\n    setIsFlag(!isFlag);\n    console.log(isFlag);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"new-expense\",\n    children: [\"isFlag? :(\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isEditState,\n      type: \"submit\",\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 20\n    }, this), \" ) :(\", /*#__PURE__*/_jsxDEV(ExpenseForm, {\n      onSaveExpenseData: saveExpenseDataHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 10\n    }, this), \")\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(NewExpense, \"NbxAJmUVYhIEACJE5XhbeZuvkC8=\");\n_c = NewExpense;\nexport default NewExpense;\n\n// 자식이 부모한테 data를 전달해주는 방법은 \n// 부모에서 데이터를 받을 수 있는 함수를 만들어서 함수를 포인터로 넘겨주고\n// 자식 컴포넌트는 props로 그 함수를 호출해서 인자로 넘겨주면 된다\n// 만약 같은 level에 있는 컴포넌트에 데이터를 전달해주고 싶다면 무조건 두 컴포넌트가 연결되어 있는\n// 부모 컴포넌트를 통해서만 할 수 있다\n// 이럴 경우 컴포넌트의 상태 데이터를 \"끌어올리기\"해서 부모 컴포넌트에 전달 후\n// 형제 컴포넌트는 전달 받을 수 있다\n// props를 자유 자래로 사용하는 것이 중요하다\n// 우리가 했던 것처럼 부모 컴포넌트는 자식 컴포넌트에 속성을 추가하여 함수 포인터를 전달하고\n// 자식 컴포넌트는 그 함수를 호출하여 인수로 데이터를 넘겨준다\n// 이걸 상태 데이터 끌어올리기라고 한다\n// 우리는 NewExpense에서 ExpenseForm 에서 받은 데이터를 저장하지 않는다\n// App으로 토스해줄 뿐이다\nvar _c;\n$RefreshReg$(_c, \"NewExpense\");","map":{"version":3,"names":["React","useState","ExpenseForm","NewExpense","props","saveExpenseDataHandler","enteredExpenseData","expenseData","id","Math","random","toString","onAddExpeseHandler","console","log","isFlag","setIsFlag","isEditState"],"sources":["/Users/jeonsoyeon/Desktop/react/01-starting-setup/src/components/NewExpense/NewExpense.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport './NewExpense.css';\nimport ExpenseForm from \"./ExpenseForm\";\n\nconst NewExpense = (props) => {\nconst saveExpenseDataHandler = (enteredExpenseData) => {\n    // 매개변수로 받아온 Data 객체를 저장하고\n    // 새로운 키인 id룰 추가한다\n    const expenseData = {\n        ...enteredExpenseData,\n        id : (Math.random()*10 + 1).toString()\n    };\n    props.onAddExpeseHandler(expenseData);\n    console.log(expenseData);\n};\nconst [isFlag, setIsFlag] = useState(true);\nconst isEditState = () =>{\n  setIsFlag(!isFlag);\n  console.log(isFlag);\n};\n  return (\n    <div className=\"new-expense\">\n        {/* \n            컴포넌트 내부에서 어떤 일이 벌어졌을 때 작동되는 함수로 ExpenseData가 저장될 때 호출된다 \n            컴포넌트 안에서 호출 될 수도 있는 함수이며 부모에서 정의를 해야한다\n            onSaveExpnseData 속성은 값으로 이 saveExpenseDataHandler 함수를 가진다\n            그러면 자식인 ExpenseForm으로 전달된다\n        */}\n      \n         isFlag? :(<button onClick={isEditState} type=\"submit\">Add New Expense</button> ) :(\n         <ExpenseForm onSaveExpenseData = {saveExpenseDataHandler}/>\n        )\n      \n      \n    </div>\n  );\n};\n\nexport default NewExpense;\n\n// 자식이 부모한테 data를 전달해주는 방법은 \n// 부모에서 데이터를 받을 수 있는 함수를 만들어서 함수를 포인터로 넘겨주고\n// 자식 컴포넌트는 props로 그 함수를 호출해서 인자로 넘겨주면 된다\n// 만약 같은 level에 있는 컴포넌트에 데이터를 전달해주고 싶다면 무조건 두 컴포넌트가 연결되어 있는\n// 부모 컴포넌트를 통해서만 할 수 있다\n// 이럴 경우 컴포넌트의 상태 데이터를 \"끌어올리기\"해서 부모 컴포넌트에 전달 후\n// 형제 컴포넌트는 전달 받을 수 있다\n// props를 자유 자래로 사용하는 것이 중요하다\n// 우리가 했던 것처럼 부모 컴포넌트는 자식 컴포넌트에 속성을 추가하여 함수 포인터를 전달하고\n// 자식 컴포넌트는 그 함수를 호출하여 인수로 데이터를 넘겨준다\n// 이걸 상태 데이터 끌어올리기라고 한다\n// 우리는 NewExpense에서 ExpenseForm 에서 받은 데이터를 저장하지 않는다\n// App으로 토스해줄 뿐이다"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB;AACzB,OAAOC,WAAW,MAAM,eAAe;AAAC;AAExC,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAC9B,MAAMC,sBAAsB,GAAIC,kBAAkB,IAAK;IACnD;IACA;IACA,MAAMC,WAAW,GAAG;MAChB,GAAGD,kBAAkB;MACrBE,EAAE,EAAG,CAACC,IAAI,CAACC,MAAM,EAAE,GAAC,EAAE,GAAG,CAAC,EAAEC,QAAQ;IACxC,CAAC;IACDP,KAAK,CAACQ,kBAAkB,CAACL,WAAW,CAAC;IACrCM,OAAO,CAACC,GAAG,CAACP,WAAW,CAAC;EAC5B,CAAC;EACD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAMgB,WAAW,GAAG,MAAK;IACvBD,SAAS,CAAC,CAACD,MAAM,CAAC;IAClBF,OAAO,CAACC,GAAG,CAACC,MAAM,CAAC;EACrB,CAAC;EACC,oBACE;IAAK,SAAS,EAAC,aAAa;IAAA,WAMrB,YAEQ;MAAQ,OAAO,EAAEE,WAAY;MAAC,IAAI,EAAC,QAAQ;MAAA,UAAC;IAAe;MAAA;MAAA;MAAA;IAAA,QAAS,SAC9E,uBAAC,WAAW;MAAC,iBAAiB,EAAIZ;IAAuB;MAAA;MAAA;MAAA;IAAA,QAAE,KAIhE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAC,GAhCIF,UAAU;AAAA,KAAVA,UAAU;AAkChB,eAAeA,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}