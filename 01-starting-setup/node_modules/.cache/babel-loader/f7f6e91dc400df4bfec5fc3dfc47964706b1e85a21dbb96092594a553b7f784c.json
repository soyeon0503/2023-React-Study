{"ast":null,"code":"var _jsxFileName = \"/Users/jeonsoyeon/Desktop/react/01-starting-setup/src/components/NewExpense/ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = () => {\n  _s();\n  // 인자로 event를 받으면 이벤트 객체를 받을 수 있다.\n  // target이라는 프로퍼티는 이벤트가 발생되는 요소를 가리킨다\n  // values는 이벤트가 발생된 시점의 입력값을 값으로 가진다\n  //event.target.value이 값은 문자열로 return 된다\n  //항상 문자열로 초기화된다\n\n  // 컴포넌트가 재 평가되는 상황에서 값을저장해서 살리고 싶을 때도 useState를 사용할 수 있다.\n\n  //   const [enteredTitle, setEnteredTitle] = useState(\"\");\n  //   const [enteredAmount, setEnteredAmount] = useState(\"\");\n  //   const [enteredDate, setEnteredDate] = useState(\"\");\n\n  //세가지 state를 각각 관리할 수도 있지만 결국은 한 폼에 입력받는 값이므로 한번에 관리해도 상관없다\n  //어느게 좋다 나쁘다는 아니지만 뭐.. 개발자가 알아서 생각하자\n  const [userInput, setUserInput] = useState({\n    enteredTitle: '',\n    enteredAmount: '',\n    enteredDate: ''\n  });\n  const titleChangeHandler = event => {\n    // title event trigger\n    // setEnteredTitle(event.target.value);\n    setUserInput({\n      // 여기서 변경되는 건 title이지만 나머지 두 값도 잊지 않아야 한다\n      // 업데이트되지 않는 값은 기존 상태 값을 복사한다\n      // 스프레드 연산자를 통해 키와 값을 오버라이드 할 수 있다\n      ...userInput,\n      enteredTitle: event.target.value\n    });\n  };\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n    // 하기의 코드는 좋은 방법은 아니다\n    // 만약 하나씩 증가하는 카운터를 관리하고 있다면 하기의 방법처럼 하는 것이 아니라\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount : event.target.value,\n    // });\n    // 상태를 업데이트하는 함수를 위한 대체 폼을 사용해야 한다\n    // useState를 호출해서 카운팅하는 함수를 전달해야한다\n    // 이 접근 방식을 사용한다면 리액트는 이안에 있는 함수에서 이 상태 스냅샷이 가장 최신의 스냅샷이라는 것과\n    // 항상 계획된 상태 업데이트를 염두에 두고 있다는 것을 보증한다\n    // 항상 최신 상태의 스냅샷에서 작업하도록 하는 좀 더 안전한 방법이다\n    // 이전 상태에 따라 상태를 업데이트 한다면 하기와 가이 함수 폼을 사용하는 것이 좋다\n    // setUserInput((prevState) => {\n    //     return {... prevState, \n    //         enteredAmount : event.target.value\n    //     };\n    // });\n  };\n\n  const dateChangeHandler = event => {\n    // setEnteredDate(event.target.value);\n    setUserInput({\n      ...userInput,\n      enteredDate: event.target.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2022-01-01\",\n          max: \"2023-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseForm, \"BA44HCtePJKAj5qCZKW+pKAxMU8=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\n\n// onChange & onInput\n// 겉에서 봤을 땐 같은 기능을 하지만(사용자 입력에 반응)\n// onChange는 모든 입력 타입에 같은 이벤트를 사용할 수 있다\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","userInput","setUserInput","enteredTitle","enteredAmount","enteredDate","titleChangeHandler","event","target","value","amountChangeHandler","setEnteredAmount","dateChangeHandler"],"sources":["/Users/jeonsoyeon/Desktop/react/01-starting-setup/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\n\nconst ExpenseForm = () => {\n  // 인자로 event를 받으면 이벤트 객체를 받을 수 있다.\n  // target이라는 프로퍼티는 이벤트가 발생되는 요소를 가리킨다\n  // values는 이벤트가 발생된 시점의 입력값을 값으로 가진다\n  //event.target.value이 값은 문자열로 return 된다\n  //항상 문자열로 초기화된다\n\n  // 컴포넌트가 재 평가되는 상황에서 값을저장해서 살리고 싶을 때도 useState를 사용할 수 있다.\n\n//   const [enteredTitle, setEnteredTitle] = useState(\"\");\n//   const [enteredAmount, setEnteredAmount] = useState(\"\");\n//   const [enteredDate, setEnteredDate] = useState(\"\");\n\n//세가지 state를 각각 관리할 수도 있지만 결국은 한 폼에 입력받는 값이므로 한번에 관리해도 상관없다\n//어느게 좋다 나쁘다는 아니지만 뭐.. 개발자가 알아서 생각하자\n  const [userInput, setUserInput] = useState({\n    enteredTitle : '',\n    enteredAmount : '',\n    enteredDate : ''\n  });\n\n  const titleChangeHandler = (event) => {\n    // title event trigger\n    // setEnteredTitle(event.target.value);\n    setUserInput({\n        // 여기서 변경되는 건 title이지만 나머지 두 값도 잊지 않아야 한다\n        // 업데이트되지 않는 값은 기존 상태 값을 복사한다\n        // 스프레드 연산자를 통해 키와 값을 오버라이드 할 수 있다\n        ...userInput,\n        enteredTitle : event.target.value,\n    });\n  };\n  const amountChangeHandler = (event) => {\n    setEnteredAmount(event.target.value);\n    // 하기의 코드는 좋은 방법은 아니다\n    // 만약 하나씩 증가하는 카운터를 관리하고 있다면 하기의 방법처럼 하는 것이 아니라\n    // setUserInput({\n    //     ...userInput,\n    //     enteredAmount : event.target.value,\n    // });\n    // 상태를 업데이트하는 함수를 위한 대체 폼을 사용해야 한다\n    // useState를 호출해서 카운팅하는 함수를 전달해야한다\n    // 이 접근 방식을 사용한다면 리액트는 이안에 있는 함수에서 이 상태 스냅샷이 가장 최신의 스냅샷이라는 것과\n    // 항상 계획된 상태 업데이트를 염두에 두고 있다는 것을 보증한다\n    // 항상 최신 상태의 스냅샷에서 작업하도록 하는 좀 더 안전한 방법이다\n    // 이전 상태에 따라 상태를 업데이트 한다면 하기와 가이 함수 폼을 사용하는 것이 좋다\n    // setUserInput((prevState) => {\n    //     return {... prevState, \n    //         enteredAmount : event.target.value\n    //     };\n    // });\n\n  };\n  const dateChangeHandler = (event) => {\n    // setEnteredDate(event.target.value);\n    setUserInput({\n        ...userInput,\n        enteredDate : event.target.value,\n    });\n  };\n\n  return (\n    <form>\n      <div className=\"new-expense__controls\">\n        <div className=\"new-expense__control\">\n          <label>Title</label>\n          <input type=\"text\" onChange={titleChangeHandler} />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={amountChangeHandler}\n          />\n        </div>\n        <div className=\"new-expense__control\">\n          <label>Date</label>\n          <input\n            type=\"date\"\n            min=\"2022-01-01\"\n            max=\"2023-12-31\"\n            onChange={dateChangeHandler}\n          />\n        </div>\n      </div>\n      <div className=\"new-expense__actions\">\n        <button type=\"submit\">Add Expense</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n\n// onChange & onInput\n// 겉에서 봤을 땐 같은 기능을 하지만(사용자 입력에 반응)\n// onChange는 모든 입력 타입에 같은 이벤트를 사용할 수 있다\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,mBAAmB;AAAC;AAE3B,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB;EACA;EACA;EACA;EACA;;EAEA;;EAEF;EACA;EACA;;EAEA;EACA;EACE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGH,QAAQ,CAAC;IACzCI,YAAY,EAAG,EAAE;IACjBC,aAAa,EAAG,EAAE;IAClBC,WAAW,EAAG;EAChB,CAAC,CAAC;EAEF,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;IACpC;IACA;IACAL,YAAY,CAAC;MACT;MACA;MACA;MACA,GAAGD,SAAS;MACZE,YAAY,EAAGI,KAAK,CAACC,MAAM,CAACC;IAChC,CAAC,CAAC;EACJ,CAAC;EACD,MAAMC,mBAAmB,GAAIH,KAAK,IAAK;IACrCI,gBAAgB,CAACJ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAEF,CAAC;;EACD,MAAMG,iBAAiB,GAAIL,KAAK,IAAK;IACnC;IACAL,YAAY,CAAC;MACT,GAAGD,SAAS;MACZI,WAAW,EAAGE,KAAK,CAACC,MAAM,CAACC;IAC/B,CAAC,CAAC;EACJ,CAAC;EAED,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,uBAAuB;MAAA,wBACpC;QAAK,SAAS,EAAC,sBAAsB;QAAA,wBACnC;UAAA,UAAO;QAAK;UAAA;UAAA;UAAA;QAAA,QAAQ,eACpB;UAAO,IAAI,EAAC,MAAM;UAAC,QAAQ,EAAEH;QAAmB;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA,QAC/C,eACN;QAAK,SAAS,EAAC,sBAAsB;QAAA,wBACnC;UAAA,UAAO;QAAM;UAAA;UAAA;UAAA;QAAA,QAAQ,eACrB;UACE,IAAI,EAAC,QAAQ;UACb,GAAG,EAAC,MAAM;UACV,IAAI,EAAC,MAAM;UACX,QAAQ,EAAEI;QAAoB;UAAA;UAAA;UAAA;QAAA,QAC9B;MAAA;QAAA;QAAA;QAAA;MAAA,QACE,eACN;QAAK,SAAS,EAAC,sBAAsB;QAAA,wBACnC;UAAA,UAAO;QAAI;UAAA;UAAA;UAAA;QAAA,QAAQ,eACnB;UACE,IAAI,EAAC,MAAM;UACX,GAAG,EAAC,YAAY;UAChB,GAAG,EAAC,YAAY;UAChB,QAAQ,EAAEE;QAAkB;UAAA;UAAA;UAAA;QAAA,QAC5B;MAAA;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACF,eACN;MAAK,SAAS,EAAC,sBAAsB;MAAA,uBACnC;QAAQ,IAAI,EAAC,QAAQ;QAAA,UAAC;MAAW;QAAA;QAAA;QAAA;MAAA;IAAS;MAAA;MAAA;MAAA;IAAA,QACtC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEX,CAAC;AAAC,GA5FIZ,WAAW;AAAA,KAAXA,WAAW;AA8FjB,eAAeA,WAAW;;AAE1B;AACA;AACA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}